name: Build et Deploy docker image

on:
  push:
    tags:
      - 'v*'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: visto
        id: image
        run: |
          VERSION=${GITHUB_REF#refs/*/}
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_USER }}/secure:$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"
      
      - name: Build docker image
        run: >-
          docker build docker/secure
          --label "org.label-schema.vcs-ref=$GITHUB_SHA"
          --tag $DOCKER_IMAGE
      - run: docker push $DOCKER_IMAGE
      
  deploy-do:
    
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Get ref tag
        id: ref
        run: |
          VERSION=${GITHUB_REF#refs/*/}
          echo "::set-output name=version::$VERSION"
      - name: DigitalOcean App Platform deployment
        uses: digitalocean/app_action@v1.1.3
        with:
          app_name: devopsvisto
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          images: '[{
                "name": "visto",
                "image":{
                  "registry_type": "DOCKER_HUB",
                  "registry": "visto",
                  "repository": "devopsvisto",
                  "tag": "${{steps.ref.outputs.version}}"
                 }
              }]'
  
  deploy-sc:
    
    runs-on: ubuntu-22.04
    name: Deploy
    env:
      REGION: fr-par
      REGISTRY_URL: rg.fr-par.scw.cloud/funcscwynovmwg0m0ur
      CONTAINER_ID: 184f31f3a351
    needs: build
    steps:
      - name: Get ref tag
        id: ref
        run: |
          VERSION=${GITHUB_REF#refs/*/}
          echo "::set-output name=version::$VERSION"
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: pull image
        run: docker pull ${{ secrets.DOCKER_USER }}/secure:${{steps.ref.outputs.version}}
      - uses: actions/checkout@v2
      - name: Login to Scaleway Container Registry
        run: docker login $REGISTRY_URL --username nologin --password ${{ secrets.SCALEWAY_SECRET_KEY }}
      - name: tag image
        run: docker tag ${{ secrets.DOCKER_USER }}/secure:${{steps.ref.outputs.version}} ${{ env.REGISTRY_URL }}/ynov-secure:${{steps.ref.outputs.version}}
      - name: Push image to registry
        run: docker push ${{ env.REGISTRY_URL }}/ynov-secure:${{steps.ref.outputs.version}}
      - name: list instances
        uses: jawher/action-scw@v2.5.4
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
          SCW_ORGANIZATION_ID: ${{ secrets.SCALEWAY_ORGANIZATION_ID }}
          SCW_ZONE: fr-par-1
          NAMESPACE_ID: 861546b0-d851-471c-87db-4b23b7f87256
        with:
          args: container container list -o=json
      
      - name: Get instance id and expose it in INSTANCE_ID env var
        run: echo "CONTAINER_ID=$(cat "${GITHUB_WORKSPACE}/scw.output" | jq -r '.[0].id')" >> $GITHUB_ENV
      
      - name: deploy instance
        uses: jawher/action-scw@v2.5.4
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
          SCW_ORGANIZATION_ID: ${{ secrets.SCALEWAY_ORGANIZATION_ID }}
          SCW_ZONE: fr-par-1
        with:
          args: container container update ${{ env.CONTAINER_ID }} port=5000 registry-image=${{ env.REGISTRY_URL }}/ynov-secure:${{steps.ref.outputs.version}} -o=json